// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum UserRole {
  RESEARCHER
  PARTICIPANT
  ADMIN
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           UserRole

  tokens   Token[]
  sessions Session[]

  // Relations
  studies        StudyResearcher[] // researcher memberships
  participations ParticipantStudy[] // participant memberships
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

enum TokenType {
  RESET_PASSWORD
  CONFIRM_EMAIL
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Study {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())

  // Relations
  researchers    StudyResearcher[]
  participations ParticipantStudy[]
}

enum ResearcherRole {
  PI
  COLLABORATOR
  VIEWER
}

model StudyResearcher {
  id      Int @id @default(autoincrement())
  studyId Int
  userId  Int

  study Study @relation(fields: [studyId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  role      ResearcherRole @default(PI)
  createdAt DateTime       @default(now())

  @@unique([studyId, userId])
}

model ParticipantStudy {
  id            Int @id @default(autoincrement())
  participantId Int
  studyId       Int

  // Pseudonym (uuid4) used for all exports
  pseudonym String @default(uuid())

  participant User  @relation(fields: [participantId], references: [id], onDelete: Cascade)
  study       Study @relation(fields: [studyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([participantId, studyId]) // one enrollment per study
}
