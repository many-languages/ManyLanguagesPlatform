// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

enum UserRole {
  RESEARCHER
  PARTICIPANT
  ADMIN
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  firstname      String?
  lastname       String?
  username       String?
  email          String   @unique
  hashedPassword String?
  role           UserRole

  tokens   Token[]
  sessions Session[]

  gravatar String?

  // Relations
  studies        StudyResearcher[] // researcher memberships
  participations ParticipantStudy[] // participant memberships
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

enum TokenType {
  RESET_PASSWORD
  CONFIRM_EMAIL
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum StudyStatus {
  OPEN
  CLOSED
}

model Study {
  // Basic information
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String

  // Study configuration
  status            StudyStatus @default(OPEN) // Whether study is open for datacollection (can be set manually)
  startDate         DateTime // Expected startDate of data collection, study opens at startDate automatically
  endDate           DateTime // Expected endDate of data collection, study closes at endDate automatically 
  sampleSize        Int // Number of participants to be collected
  payment           String // Description of payment method
  ethicalPermission String // URL/link to ethical approval
  length            String // e.g. "30 minutes", stored as text

  // JATOS integration
  jatosStudyId   Int // ID returned from JATOS after import
  jatosStudyUUID String @unique // optional, JATOS also has UUIDs 
  jatosFileName  String // original uploaded filename

  // Relations
  researchers    StudyResearcher[]
  participations ParticipantStudy[]
}

enum ResearcherRole {
  PI
  COLLABORATOR
  VIEWER
}

model StudyResearcher {
  id      Int @id @default(autoincrement())
  studyId Int
  userId  Int

  study Study @relation(fields: [studyId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  role      ResearcherRole @default(PI)
  createdAt DateTime       @default(now())

  @@unique([studyId, userId])
}

model ParticipantStudy {
  id      Int @id @default(autoincrement())
  userId  Int
  studyId Int

  pseudonym String @default(uuid())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  study Study @relation(fields: [studyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, studyId])
}
